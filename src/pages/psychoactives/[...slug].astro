---
import { getCollection } from 'astro:content';
// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const pages = await getCollection('psychoactives');
  return pages.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}
// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content } = await entry.render();
import data from '../../data.json';
let value = entry.slug
const substances = await getCollection('psychoactives');
import BaseLayout from '../../layouts/BaseLayout.astro';
import EditPage from '../../components/edit_page.astro';
import Disclaimer from '../../components/disclaimer.astro';
import Disclaimer from '../../components/disclaimer.astro';
import Psychimage from '../../components/psychimage.astro';
import Icon from "heroicons-astro/Heroicon.astro";
import { Picture } from '@astrojs/image/components';
import { combo, risk, drug_css_prefix, confidence, linkify } from '../../util';
let data = entry.data
---
<BaseLayout pageTitle={entry.data.title} metaDescription={`Psychoactives information. This is the page for harm reduction to learn about safety risks for ${entry.data.title}, ${(entry.data.family_members||[]).concat(entry.data.aka||[]).join(', ')}`}>

  <article class="prose lg:prose-xl mx-auto">
    <h2> {entry.data.title} </h2>
    <Psychimage entry={entry} />
    {entry.data.family_members &&
    <p>{entry.data.title} is not just one drug; {entry.data.title} is a group of drugs. Drugs in this group include {entry.data.family_members.join(', ')}. Drugs within the same group can have very different dosages and very different effects.</p>
  }

    {entry.data.aka && <h2>Commonly known as: </h2>
      <ul >
    {entry.data.aka.map((name) => (
      <li>
      {name}
      </li>
      ))
    }</ul>}
     <h2> Effects </h2>
     <div><Icon iconCode="chevron-up" iconStyle="outline" customClasses="h-8 w-8 stroke-green-300 inline" /> {entry.data.positive_effects}</div>
     <div><Icon iconCode="exclamation-circle" iconStyle="outline" customClasses="h-8 w-8 stroke-gray-300 inline" /> {entry.data.neutral_effects}</div>
     <div><Icon iconCode="chevron-down" iconStyle="outline" customClasses="h-8 w-8 stroke-red-300 inline" /> {entry.data.negative_effects}</div>
    <Content />

    <EditPage slug={entry.slug} type={"psychoactives"} />
  </article>

  <span class={!entry.data.duration_chart_title && "hidden"}>
    <div class="block rounded-lg my-6 bg-slate-100 p-6 shadow-[0_2px_15px_-3px_rgba(0,0,0,0.07),0_10px_20px_-2px_rgba(0,0,0,0.04)] max-w-2xl mx-auto">
      <h2>{entry.data.duration_chart_title} </h2>
      <canvas id="myChart"></canvas>
    </div>
  </span>
    <script define:vars={{ data }}>
      window.data = data
    </script>
<script>
  import Chart from 'chart.js/auto';
  import { DateTime, Duration } from 'luxon';
  import 'chartjs-adapter-luxon';
  const now = DateTime.fromISO('12:00')
  const ctx = document.getElementById('myChart');
  let duration_chart = window.data.duration_chart
  let onset = Duration.fromISO("PT"+duration_chart.onset.toUpperCase())
  let coming_up = Duration.fromISO("PT"+duration_chart.coming_up.toUpperCase())
  let plateau = Duration.fromISO("PT"+duration_chart.plateau.toUpperCase())
  let coming_down = Duration.fromISO("PT"+duration_chart.coming_down.toUpperCase())
  let max = now.plus(onset).plus(coming_up).plus(plateau).plus(coming_down)
  let chart_data = [
    {x:now, y:0},
    {x:now.plus(onset), y:0},
    {x:now.plus(onset).plus(coming_up), y:1},
    {x:now.plus(onset).plus(coming_up).plus(plateau), y:1},
    {x:max, y:0},
  ]
  Duration.fromISO('PT23H')
  let total_duration_in_seconds = (max - now)/1000
  function x_label_seconds(seconds) {
    return `${seconds} secs`
  }
  function x_label_minutes(seconds) {
    let display = Math.floor(seconds / 60)
    return `${display} mins`
  }
  function x_label_hours(seconds) {
    let display = Math.floor(seconds / 3600)
    return `${display} hrs`
  }
  function x_label(timestamp) {
    let diff = (timestamp - now.toMillis())/1000
    if (total_duration_in_seconds < 400){
      return x_label_seconds(diff)
    }
    if (total_duration_in_seconds < 20000){
      return x_label_minutes(diff)
    }
    return x_label_hours(diff)
  }
  let seen = []
  function cleaned_x_label(timestamp, idx) {
    let result = x_label(timestamp)
    return idx % 4 === 0 ? result : ''
  }
  new Chart(ctx, {
    type: 'line',
    data: {
      datasets: [
      {
        label: "Typical",
        data: chart_data,
        fill: false,
        borderColor: 'rgb(75, 192, 192)',
        cubicInterpolationMode: 'monotone',
        tension: 0.4
      }
      ]
    },
    options : {
      scales: {
        y: {
          display: false,
          grid: {
            display: false
          }
        },
        x: {
          type: 'time',
          grid: {
            display: false
          },
          ticks: {
            callback: function(val, index, ticks) {
              return cleaned_x_label(val, index);
            },
            major :{
              enabled: true
            }
          }
        }
      },
      plugins: {
        legend: {
          display: false
        }
      }
    }
  });

</script>

<h2 class="text-xl font-bold mb-4">Combinations with: </h2>
<div class="container px-6 mx-auto">
  <span class="grid w-full gap-6 grid-cols-2 md:grid-cols-4 lg:grid-cols-5">
  {substances.map((substance) => (
  (substance.slug != value) && <a href={`${import.meta.env.BASE_URL}combos/` + linkify(combo([substance.slug,value])) + '/'} class="bg-white border border-gray-200 rounded-lg shadow hover:bg-gray-100 h-auto">
      <div class="p-4 h-24">
          <h3 class=" text-2xl font-bold tracking-tight text-gray-600">{substance.data.title}</h3>
      </div>
      <Picture
        class="h-auto max-w-full rounded-lg align-middle leading-none shadow-lg"
        src={'../../' + substance.data.image_location}
        widths={[320]}
        aspectRatio={"4:3"}
        alt={substance.data.image_caption}
      />
    </a>

  ))}
  </span>
</div>
<Disclaimer />
</BaseLayout>
