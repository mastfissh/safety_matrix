---
import { getCollection } from 'astro:content';
// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const pages = await getCollection('psychoactives');
  return pages.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}
// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content } = await entry.render();
import data from '../../data.json';
let value = entry.slug

import Grid from '../../components/grid.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
let visible = false
if (entry.data.display_grid){
  visible = true
}
import EditPage from '../../components/edit_page.astro';
import Disclaimer from '../../components/disclaimer.astro';
import ConfidencePanel from '../../components/confidence_panel.astro';
import RiskPanel from '../../components/risk_panel.astro';
import Disclaimer from '../../components/disclaimer.astro';
import Psychimage from '../../components/psychimage.astro';
import Icon from "heroicons-astro/Heroicon.astro";
let data = entry.data
---
<BaseLayout pageTitle={entry.data.title}>

  <article class="prose lg:prose-xl mx-auto">
    <h2> {entry.data.title} </h2>
    <Psychimage entry={entry} />
    {entry.data.family_members &&
    <h2>This is a family of psychoactives: </h2>
      <ul >
    {entry.data.family_members.map((name) => (
      <li>
      {name}
      </li>
      ))
    }</ul>}

    <h2>Commonly Known as: </h2>
      <ul >
    {entry.data.aka.map((name) => (
      <li>
      {name}
      </li>
      ))
    }</ul>
     <ConfidencePanel conf={entry.data.confidence}/>
     <RiskPanel risk={entry.data.risk}/>
     <h2> Effects </h2>
     <div><Icon iconCode="chevron-up" iconStyle="outline" customClasses="h-8 w-8 stroke-green-300 inline" /> {entry.data.positive_effects}</div>
     <div><Icon iconCode="exclamation-circle" iconStyle="outline" customClasses="h-8 w-8 stroke-gray-300 inline" /> {entry.data.neutral_effects}</div>
     <div><Icon iconCode="chevron-down" iconStyle="outline" customClasses="h-8 w-8 stroke-red-300 inline" /> {entry.data.negative_effects}</div>
    <Content />

    <EditPage slug={entry.slug} type={"psychoactives"} />
  </article>
  <div class="block rounded-lg my-6 bg-slate-100 p-6 shadow-[0_2px_15px_-3px_rgba(0,0,0,0.07),0_10px_20px_-2px_rgba(0,0,0,0.04)] max-w-2xl mx-auto">
      <h2>{entry.data.duration_chart_title} </h2>
      <canvas id="myChart"></canvas>
    </div>
    <script define:vars={{ data }}>
      window.data = data
    </script>
<script>
  import Chart from 'chart.js/auto';
  import { DateTime, Duration } from 'luxon';
  import 'chartjs-adapter-luxon';
  const now = DateTime.fromISO('12:00')
  const ctx = document.getElementById('myChart');
  let duration_chart = window.data.duration_chart
  let onset = Duration.fromISO("PT"+duration_chart.onset.toUpperCase())
  let coming_up = Duration.fromISO("PT"+duration_chart.coming_up.toUpperCase())
  let plateau = Duration.fromISO("PT"+duration_chart.plateau.toUpperCase())
  let coming_down = Duration.fromISO("PT"+duration_chart.coming_down.toUpperCase())
  let chart_data = [
    {x:now, y:0},
    {x:now.plus(onset), y:0},
    {x:now.plus(onset).plus(coming_up), y:1},
    {x:now.plus(onset).plus(coming_up).plus(plateau), y:1},
    {x:now.plus(onset).plus(coming_up).plus(plateau).plus(coming_down), y:0},
  ]
  Duration.fromISO('PT23H')
  new Chart(ctx, {
    type: 'line',
    data: {
      datasets: [
      {
        label: "Typical",
        data: chart_data,
        fill: false,
        borderColor: 'rgb(75, 192, 192)',
        cubicInterpolationMode: 'monotone',
        tension: 0.4
      }
      ]
    },
    options : {
      scales: {
        y: {
          display: false,
          grid: {
            display: false
          }
        },
        x: {
          type: 'time',
          grid: {
            display: false
          }
        }
      },
      plugins: {
        legend: {
          display: false
        }
      }
    }
  });

</script>

<Disclaimer />
{visible && <Grid page={entry.slug} data={data} />}
</BaseLayout>
