---
import { getCollection } from 'astro:content';
// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const pages = await getCollection('substances');
  return pages.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}
// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props;
const { Content } = await entry.render();
import data from '../../data.json';
let value = entry.data.slug

import Grid from '../../components/grid.astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
let visible = false
if (entry.data.display_grid){
  visible = true
}
import Disclaimer from '../../components/disclaimer.astro';
---
<BaseLayout pageTitle={entry.data.title}>
  <article class="prose lg:prose-xl mx-auto">
    <h2> {entry.data.title} </h2>
    <img src={entry.data.image_location} />
    {entry.data.image_caption}
    <h3>Commonly Known as: </h3>
      <ul >
    {entry.data.aka.map((name) => (
      <li>
      {name}
      </li>
      ))
    }</ul>
    <Content />
    <canvas id="myChart"></canvas>
  </article>
<script>
  import Chart from 'chart.js/auto';
  const ctx = document.getElementById('myChart');
  new Chart(ctx, {
    type: 'line',
    data: {
      labels: [0,1,2,3,4,5,6,7,8],
      datasets: [{
        label: false,
        data: [{x:0, y:0}, {x:1, y:2}, {x:4, y:4}, {x:6, y:3} , {x:8, y:0}],
        fill: false,
        borderColor: 'rgb(75, 192, 192)',
        tension: 0.1
      }]
    },
    options : {
      scales: {
        y: {
          display: false,
          grid: {
            display: false
          }
        },
        x: {
          grid: {
            display: false
          }
        }
      },
      plugins: {
        legend: {
          display: false
        }
      }
    }
  });

</script>

<Disclaimer />
{visible && <Grid page={entry.data.slug} data={data} />}
</BaseLayout>
