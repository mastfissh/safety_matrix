---

const { page, data } = Astro.props;
let drugs = data["drugs"].filter(item => item !== page)
import { combo, risk, drug_css_prefix, confidence, linkify } from '../util';
import Combolink from './combolink.astro';
import { getCollection } from 'astro:content';
import Icon from "heroicons-astro/Heroicon.astro";
const substances = await getCollection('psychoactives');
let idx = {}
for (let sub of substances){
  idx[sub['slug']] = sub
}

function risk_to_bg(risk){
  const map = {
    'SR' : 'bg-red-100',
    'GR' : 'bg-orange-100',
    'MR' : 'bg-amber-100',
    'LRS' : 'bg-cyan-100',
    'LRD' : 'bg-violet-100',
    'LRNS' : 'bg-blue-100',
    'unknown' : 'bg-slate-100',
  }
  return map[risk]
}

function drug_to_keywords(drug){
  drug = linkify(drug)
  const drug_info = idx[drug];
  let out = [drug]
  if (drug_info){
    out = out.concat(drug_info.data.aka)
  }
  return out.join(',')
}
---
<script>
window.onload = (event) => {
  if (!document.getElementById('safety_grid')){
    return
  }
  const checkboxes = document.querySelectorAll('.filter_check');
  function compute_visibility(){
    let fragments = []
    checkboxes.forEach((box) => {
      if (box.checked){
        fragments.push(box.id.replace('drug_', ''))
        for (const item of document.querySelectorAll("." + box.id)) {
          item.style.display = '';
        }
      }
    })
    checkboxes.forEach((box) => {
      if (!box.checked) {
        for (const item of document.querySelectorAll("." + box.id)) {
          item.style.display = 'none';
        }
      }
    })
    window.location.hash = fragments.join(',')
  }
  function checkBoxes(hashes) {
    for (let checkbox of checkboxes){
      if (hashes.includes(checkbox.id.replace('drug_', ''))){
        checkbox.checked = true
      }
    }
  }
  if(window.location.hash) {
    checkBoxes(window.location.hash)
  } else {
    checkBoxes('LSD,Cannabis,Opioids')
  }
  compute_visibility()
  document.getElementById('safety_grid').style.display = '';
  checkboxes.forEach((outerbox) => {
    outerbox.addEventListener('click', (event) => {
      compute_visibility()
    });
  });

  const search = document.getElementById('search')
  const items = document.querySelectorAll('.searchable');
  search.addEventListener("input", (event) => {
    items.forEach((item) => {
      if (item.dataset.keywords.toLowerCase().search(search.value.toLowerCase()) != -1){
        item.style.display = '';
      } else {
        item.style.display = 'none';
      }
    })
  });
};
</script>

<div class="block rounded-lg my-6 bg-gray-50 p-6 shadow-[0_2px_15px_-3px_rgba(0,0,0,0.07),0_10px_20px_-2px_rgba(0,0,0,0.04)] max-w-2xl mx-auto">
 <h3 class="text-xl font-bold"> Key </h3>
 <p>In this chart ‘risk’ refers to danger or hazard. ‘Synergy’ refers to increased subjective effects (or in some cases, the creation of an additional subjective effect), while ‘decrease’ refers to reduced subjective effects.
 </p>
 <div class="flex space-x-4">
  <Icon iconCode="exclamation-circle" iconStyle="outline" customClasses="h-7 w-7 inline" />
  This icon indicates that there's low confidence in the risk rating
</div>
 <span class="grid grid-cols-2 lg:grid-cols-3">
    <span class:list={risk_to_bg('SR')} class = "text-m font-medium m-2 px-2.5 py-0.5 rounded"> Significant Risk</span>
    <span class:list={risk_to_bg('GR')} class = "text-m font-medium m-2 px-2.5 py-0.5 rounded"> Greater Risk</span>
    <span class:list={risk_to_bg('MR')} class = "text-m font-medium m-2 px-2.5 py-0.5 rounded"> Minor Risk</span>
    <span class:list={risk_to_bg('LRS')} class = "text-m font-medium m-2 px-2.5 py-0.5 rounded"> Low Risk Synergy</span>
    <span class:list={risk_to_bg('LRD')} class = "text-m font-medium m-2 px-2.5 py-0.5 rounded"> Low Risk Decrease</span>
    <span class:list={risk_to_bg('LRNS')} class = "text-m font-medium m-2 px-2.5 py-0.5 rounded"> Low Risk No Synergy</span>
  </span>
</div>
<div>
<table id="safety_grid" class="w-full table-fixed border-collapse border-2 border-slate-900 text-sm md:text-md lg:text-lg" style="display: none;">
  <tr class:list={"topkey"} class="border-grey-500 border p-1 overflow-hidden">
    <th class="border-grey-500 border"></th>
    {drugs.map((drug) => (
      <th class:list={drug_css_prefix(drug)} class="border-grey-500 border p-1 overflow-hidden font-normal">{drug}</th>
    ))
  }
  </tr>
    {drugs.map((drugrow) => (
      <tr class:list={drug_css_prefix(drugrow)} >
        <td class:list={drug_css_prefix(drugrow)} class="border-grey-500 border p-1 overflow-hidden">{drugrow}</td>
        {drugs.map((drugcell) => (
          <td class="border-grey-500 border p-1 overflow-hidden" class:list={[risk_to_bg(risk([page,drugrow,drugcell], data)),drug_css_prefix(drugrow),drug_css_prefix(drugcell)]}><Combolink combo={combo([page,drugrow,drugcell])} conf={confidence([page,drugrow,drugcell], data)} /></td>
         ))}
      </tr>
     ))}
</table>
</div>
<div clas="container">
<form class="my-6">
    <label for="search" class="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white">Search</label>
    <div class="relative">

        <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
          <Icon iconCode="search" iconStyle="outline" customClasses="w-5 h-5 stroke-gray-500" />
        </div>
        <input type="search" id="search" class="block w-full p-4 pl-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500  dark:border-gray-600 dark:placeholder-gray-400 text-black dark:focus:ring-blue-500 dark:focus:border-blue-50" placeholder="Search" required>

    </div>
  </form>
<ul class="grid w-full gap-6 grid-cols-2 md:grid-cols-4 lg:grid-cols-5">
  {drugs.map((drug) => (
    <li class="searchable" data-keywords={drug_to_keywords(drug)}>
        <input type="checkbox" class="filter_check hidden peer" id={drug_css_prefix(drug)} name={drug_css_prefix(drug)} value={drug_css_prefix(drug)} >
        <label for={drug_css_prefix(drug)} class="inline-flex items-center justify-between w-full p-5  bg-white border-2 border-gray-200 rounded-lg cursor-pointer hover:text-gray-300 border-gray-700 peer-checked:border-blue-600 peer-checked:text-gray-300  peer-checked:bg-gray-600 peer-checked:text-gray-50 text-gray-1000 ">
            <div class="block">
                <div class="w-full text-md lg:text-lg font-semibold">{drug}</div>
            </div>
        </label>
    </li>
  ))}
</ul>
</div>
